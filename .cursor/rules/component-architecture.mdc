---
alwaysApply: true
description: "kit-ui 组件架构组织规范"
---

# kit-ui 组件架构组织规范

## 组件目录结构

### 1. 组件文件组织

每个组件应遵循以下目录结构：

```base
uni_modules/kit-ui/components/k-[component-name]/
├── k-[component-name].uvue          # 主组件文件
├── README.md                        # 组件文档
├── index.ts                         # 组件入口文件（可选）
├── config.uts                       # 组件配置（可选）
├── utils.uts                        # 工具函数（可选）
├── fonts/                           # 字体文件（图标组件）
│   ├── k-icon.ttf
│   ├── k-icon.uts
│   └── k-icon.json
└── item.type.uts                    # 类型定义（复杂组件）
```

### 2. 组件命名规范

- 组件目录名：`k-[component-name]`
- 主文件：`k-[component-name].uvue`
- 组件名：`K[ComponentName]`（PascalCase）
- CSS 类名前缀：`k-[component-name]`

## 组件代码架构

### 1. 组件文件结构模板

```vue
<script setup lang="uts">
import { computed, inject, ref, onMounted, onBeforeUnmount, watch } from 'vue'
// 导入类型定义
import { ComponentPropsType, ComponentEventsType } from './types.uts'

/**
 * k-[component-name] 组件
 * 组件功能描述
 * 
 * @example
 * <k-[component-name] prop1="value1" @event="handler" />
 */

// 注入主题配置
const themeConfig = inject('kit-theme', {})

// 定义组件属性
const props = defineProps<ComponentPropsType>()

// 定义事件
const emit = defineEmits<ComponentEventsType>()

// 获取插槽
const slots = useSlots()

// 计算属性
const computedValue = computed(() => {
    // 计算逻辑
})

// 事件处理函数
const handleEvent = (event: any) => {
    emit('event', event)
}

// 生命周期
onMounted(() => {
    // 初始化逻辑
})

onBeforeUnmount(() => {
    // 清理逻辑
})
</script>

<template>
    <view class="kit-ui--root k-[component-name]" :class="componentClass" :style="componentStyle" @click="handleEvent">
        <!-- 组件内容 -->
    </view>
</template>

<style lang="scss">
@import "../../theme/index.scss";

.k-[component-name] {
    // 组件样式
}
</style>
```

### 2. 组件属性定义规范

```typescript
// 使用 withDefaults 定义默认值
const props = withDefaults(defineProps<ComponentPropsType>(), {
    prop1: 'defaultValue',
    prop2: false,
    prop3: null
})

// 复杂组件使用类型定义
type ComponentPropsType = {
    // 基础属性
    size?: 'small' | 'medium' | 'large'
    type?: 'primary' | 'success' | 'warning' | 'error'
    disabled?: boolean
    
    // 样式属性
    customStyle?: string
    className?: string
    
    // 功能属性
    clickable?: boolean
    loading?: boolean
}
```

### 3. 事件定义规范

```typescript
// 使用 TypeScript 定义事件类型
const emit = defineEmits<{
    click: [event: any]
    change: [value: any]
    load: []
    error: [error: any]
}>()
```

## 组件功能实现规范

### 1. 主题系统集成

```typescript
// 注入主题配置
const themeConfig = inject('kit-theme', {})

// 计算动态样式
const componentStyle = computed(() => {
    const styles: string[] = []
    
    // 遍历主题配置，生成 CSS 变量
    for (let key in themeConfig) {
        const value = themeConfig[key]
        if (key != 'mode' && value != null) {
            // 将驼峰命名转换为 kebab-case
            const cssVar = key.replace(/([A-Z])/g, '-$1').toLowerCase()
            styles.push(`--k-${cssVar}: ${value}`)
        }
    }
    
    // 添加自定义样式
    if (props.customStyle != '') {
        styles.push(props.customStyle)
    }
    
    return styles.join('; ')
})
```

### 2. 状态管理规范

```typescript
// 使用 ref 管理响应式状态
const isVisible = ref(false)
const isLoading = ref(false)

// 使用 computed 计算派生状态
const isDisabled = computed(() => {
    return props.disabled || isLoading.value
})

// 监听属性变化
const size = computed(() => props.size)
watch(size, (newSize) => {
    // 处理尺寸变化
})
```

### 3. 交互状态处理

```typescript
// 计算交互状态类名
const hoverClass = computed(() => {
    if (props.disabled || props.loading) {
        return ''
    }
    return `k-[component-name]--active`
})

// 事件处理函数
const handleClick = (event: any) => {
    if (props.disabled || props.loading) {
        return
    }
    emit('click', event)
}
```

## 样式架构规范

### 1. CSS 类名组织

```scss
.k-[component-name] {
    // 基础样式
    display: flex;
    position: relative;
    box-sizing: border-box;
    
    // 状态样式
    &--disabled {
        opacity: 0.5;
        pointer-events: none;
    }
    
    &--loading {
        // 加载状态样式
    }
    
    // 尺寸变体
    &--small {
        // 小尺寸样式
    }
    
    &--medium {
        // 中等尺寸样式
    }
    
    &--large {
        // 大尺寸样式
    }
    
    // 类型变体
    &--primary {
        // 主要类型样式
    }
    
    &--success {
        // 成功类型样式
    }
    
    // 子元素样式
    &__element {
        // 子元素样式
    }
    
    &__element--modifier {
        // 子元素修饰符样式
    }
}
```

### 2. CSS 变量使用

```scss
.k-[component-name] {
    // 使用主题变量
    background-color: var(--k-bg-color, #ffffff);
    color: var(--k-text-color-primary, #1f2937);
    border-color: var(--k-border-color, #e5e7eb);
    
    // 使用组件特定变量
    padding: var(--k-spacing-base, 12px);
    border-radius: var(--k-border-radius-md, 8px);
    font-size: var(--k-font-size-base, 14px);
}
```

### 3. 响应式设计

```scss
.k-[component-name] {
    // 基础样式
    
    /* #ifdef WEB */
    // Web 特有样式
    cursor: pointer;
    user-select: none;
    
    &:hover {
        // 悬停效果
    }
    /* #endif */
    
    /* #ifdef APP */
    // App 特有样式
    /* #endif */
    
    /* #ifdef MP-WEIXIN */
    // 微信小程序特有样式
    /* #endif */
}
```

## 代码注释规范

### 1. 文件头注释

```typescript
/**
 * k-[component-name] 组件
 * 
 * @description 组件功能描述
 * @author 作者名
 * @version 1.0.0
 * @since 2024-01-01
 */
```

### 2. 函数注释

```typescript
/**
 * 处理组件点击事件
 * @param event 点击事件对象
 * @returns void
 */
const handleClick = (event: any): void => {
    // 函数实现
}

/**
 * 计算组件样式
 * @returns 计算后的样式字符串
 */
const computeStyle = (): string => {
    // 函数实现
}
```

### 3. 复杂逻辑注释

```typescript
// 根据组件属性计算状态类名
// 优先级：disabled > loading > 正常状态
const stateClass = computed(() => {
    if (props.disabled) return 'disabled'
    if (props.loading) return 'loading'
    return 'normal'
})
```

## 类型定义规范

### 1. 组件属性类型

```typescript
// 基础属性类型
type BaseProps = {
    size?: 'small' | 'medium' | 'large'
    type?: 'primary' | 'success' | 'warning' | 'error' | 'info'
    disabled?: boolean
    loading?: boolean
}

// 样式属性类型
type StyleProps = {
    customStyle?: string
    className?: string
}

// 事件属性类型
type EventProps = {
    clickable?: boolean
}

// 组合属性类型
type ComponentPropsType = BaseProps & StyleProps & EventProps
```

### 2. 事件类型定义

```typescript
// 事件参数类型
type ClickEvent = {
    target: any
    currentTarget: any
}

type ChangeEvent<T = any> = {
    value: T
    oldValue: T
}

// 事件类型映射
type ComponentEventsType = {
    click: [event: ClickEvent]
    change: [event: ChangeEvent]
    load: []
    error: [error: any]
}
```

## 错误处理规范

### 1. 参数验证

```typescript
// 属性验证
const validateProps = () => {
    if (props.size && !['small', 'medium', 'large'].includes(props.size)) {
        console.warn(`Invalid size: ${props.size}. Expected: small, medium, large`)
    }
}

onMounted(() => {
    validateProps()
})
```

### 2. 异常处理

```typescript
const handleAsyncOperation = async () => {
    try {
        isLoading.value = true
        // 异步操作
        await someAsyncFunction()
    } catch (error) {
        console.error('Operation failed:', error)
        emit('error', error)
    } finally {
        isLoading.value = false
    }
}
```

## 性能优化规范

### 1. 计算属性优化

```typescript
// 使用 computed 缓存计算结果
const expensiveValue = computed(() => {
    // 复杂计算逻辑
    return heavyComputation(props.data)
})

// 避免在模板中进行复杂计算
```

### 2. 事件处理优化

```typescript
// 使用防抖处理频繁事件
import { debounce } from '../../utils/debounce.uts'

const debouncedHandler = debounce((value: any) => {
    emit('change', value)
}, 300)
```

### 3. 内存管理

```typescript
// 及时清理定时器和监听器
onBeforeUnmount(() => {
    if (timer) {
        clearTimeout(timer)
    }
    if (animationId) {
        cancelAnimationFrame(animationId)
    }
})
```
