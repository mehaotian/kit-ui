<script setup lang="uts">
	import { computed, inject, ref, onMounted, onBeforeUnmount, watch } from 'vue'
	import {
		IconType,
		getIconConfig,
		isImageUrl,
		isSvgIcon,
		parseIconSize,
		parseIconColor,
		getIconUnicode,
	} from './config.uts'

	// 注入主题配置
	const kitTheme = inject('kit-theme', null)
	// 获取全局配置
	const config = getIconConfig()
	// Props 定义
	interface Props {
		name : string
		size ?: string
		color ?: string
		prefix ?: string
		customStyle ?: string
		disabled ?: boolean
		loading ?: boolean
		spin ?: boolean // 旋转动画
		spinSpeed ?: number // 旋转速度
		spinReverse ?: boolean // 是否反向旋转
	}


	const props = defineProps({
		// 图标名称，可以是内置图标名、图片URL或SVG图标名（格式：collection:name）
		name: {
			type: String,
			default: ''
		},
		// 图标大小，支持数字、预设尺寸（如'small'、'medium'）或带单位的尺寸值（如'20px'）
		size: {
			type: String,
			default: ''
		},
		// 图标颜色，支持颜色名、十六进制、RGB、RGBA
		color: {
			type: String,
			default: ''
		},
		// 图标前缀，用于自定义图标类名（如 'k-icon'）
		prefix: {
			type: String,
			default: ''
		},
		// 自定义样式，支持内联样式
		customStyle: {
			type: String,
			default: ''
		},
		// 是否禁用图标点击
		disabled: {
			type: Boolean,
			default: false
		},
		// 是否显示加载状态
		loading: {
			type: Boolean,
			default: false
		},
		// 是否显示旋转动画
		spin: {
			type: Boolean,
			default: false
		},
		// 旋转速度
		spinSpeed: {
			type: Number,
			default: 1000
		},
		// 是否反向旋转
		spinReverse: {
			type: Boolean,
			default: false
		}
	})


	// 旋转动画相关
	// 旋转角度
	const rotateAngle = ref(0)
	// 动画帧ID
	const animationFrameId = ref<number | null>(null)

	/**
	 * 停止旋转动画
	 */
	function stopRotateAnimation() {
		if (animationFrameId.value != null) {
			cancelAnimationFrame(animationFrameId.value)
			animationFrameId.value = null
		}
	}

	/**
	 * 启动旋转动画
	 */
	function startRotateAnimation() {
		// 如果已经有动画在运行，先停止
		stopRotateAnimation()

		// 计算每帧旋转角度
		// 默认速度为1000ms旋转一圈，即每帧约6度（假设60fps）
		let degreePerFrame = 6

		// 解析spinSpeed字符串，提取数值部分
		// 只保留数字部分
		let speed = props.spinSpeed
		// let speed = parseFloat(speedValue)

		// 确保解析出有效数字
		if (!isNaN(speed) && speed > 0) {
			// 基准：spinSpeed=1000ms时，每帧旋转6度
			degreePerFrame = 360 / (speed / 16.7) // 16.7ms约等于一帧的时间(60fps)

			// 限制每帧最大旋转角度，避免旋转过快
			if (degreePerFrame > 15) {
				degreePerFrame = 15
			}
		}

		// 动画函数
		function animate() {
			// 根据旋转方向增加或减少角度
			if (props.spinReverse) {
				rotateAngle.value -= degreePerFrame // 逆时针
				if (rotateAngle.value < 0) {
					rotateAngle.value += 360
				}
			} else {
				rotateAngle.value += degreePerFrame // 顺时针
				if (rotateAngle.value >= 360) {
					rotateAngle.value -= 360
				}
			}

			// 继续下一帧
			animationFrameId.value = requestAnimationFrame(() => {
				animate()
			})
		}

		// 开始动画
		animationFrameId.value = requestAnimationFrame(() => {
			animate()
		})
	}



	// SVG URL 构建函数
	function buildSvgUrl(name : string) : string {
		if (config.iconHost != null && config.iconHost != '') {
			// 使用自定义图标服务器
			return `${config.iconHost}/${name.replace(':', '/')}.svg`
		}

		// 使用 iconify API (需要网络)
		const [collection, iconName] = name.split(':')
		return `https://api.iconify.design/${collection}/${iconName}.svg`
	}



	// Events 定义
	const emit = defineEmits<{
		click : [event: any]
		error : [error: any]
		load : []
	}>()


	// 图标类型检测
	const iconType = computed(() : IconType => {
		if (props.name == '') return 'slot'

		// 检测是否为图片 URL
		if (isImageUrl(props.name)) {
			return 'image'
		}

		// 检测是否为 SVG (包含 : 的通常是 iconify 格式)
		if (isSvgIcon(props.name)) {
			return 'svg'
		}

		// 默认为文本图标 (Unicode)
		return 'text'
	})

	// 图标内容获取
	const iconContent = computed(() : string => {
		if (iconType.value == 'text') {
			// 使用新的图标映射函数获取 Unicode
			const unicode = getIconUnicode(props.name)
			if (unicode != null) {
				return unicode
			}
			// 检查全局配置中的自定义图标
			// const config = getIconConfig()
			// if (config.customIcons && config.customIcons[props.name]) {
			// 	return config.customIcons[props.name] as string
			// }
			// 直接返回 name（可能是 Unicode 字符）
			// return props.name
			return ''
		}

		if (iconType.value == 'image') {
			return props.name
		}

		if (iconType.value == 'svg') {
			return buildSvgUrl(props.name)
		}

		return props.name
	})

	// 尺寸处理
	const iconSize = computed(() : string => {
		if (props.size != '') {
			return parseIconSize(props.size)
		}

		// 使用配置的默认尺寸
		const defaultSize = config.defaultSize ?? 'md'
		return parseIconSize(defaultSize)
	})

	// 颜色处理
	const iconColor = computed(() : string => {
		if (props.color != '') {
			return parseIconColor(props.color)
		}

		// 使用配置的默认颜色
		const defaultColor = config.defaultColor ?? 'text'
		return parseIconColor(defaultColor)
	})


	// 样式计算
	const iconClass = computed(() : string[] => {
		const classes : string[] = []

		if (props.disabled) {
			classes.push('k-icon--disabled')
		}

		if (props.loading || props.spin) {
			classes.push('k-icon--loading')
			// 是否正反转
			if (props.spinReverse) {
				classes.push('k-icon--loading-reverse')
			}
		}

		if (iconType.value != 'slot') {
			classes.push(`k-icon--${iconType.value}`)
		}

		return classes
	})

	const iconStyle = computed(() : UTSJSONObject => {
		const style : UTSJSONObject = {}

		// #ifdef APP
		// 处理旋转动画
		if (props.loading || props.spin) {
			// 使用requestAnimationFrame计算的旋转角度
			style.transform = `rotate(${rotateAngle.value}deg)`
		}
		// #endif


		// 处理自定义样式
		if (props.customStyle != '') {
			if (typeof props.customStyle == 'string') {
				// 简单的字符串样式解析
				const styleStr = props.customStyle as string
				const pairs = styleStr.split(';')
				for (let i = 0; i < pairs.length; i++) {
					const pair = pairs[i].trim()
					if (pair != '') {
						const colonIndex = pair.indexOf(':')
						if (colonIndex > 0) {
							const key = pair.substring(0, colonIndex).trim()
							const value = pair.substring(colonIndex + 1).trim()
							style[key] = value
						}
					}
				}
			}
			// TODO 只支持 string类型，通 style ，暂不支持对象格式
			// else {
			// 	// 对象样式
			// 	const customObj = props.customStyle as UTSJSONObject
			// 	for (const key in customObj) {
			// 		style[key] = customObj[key]
			// 	}
			// }
		}

		// 处理自定义旋转速度
		if ((props.loading || props.spin) && props.spinSpeed != 1000) {
			style['animation-duration'] = (props.spinSpeed / 1000) + 's'
		}


		return style
	})

	const textClass = computed(() : string[] => {
		const classes : string[] = []

		if (props.prefix != '') {
			classes.push(props.prefix)
		}

		return classes
	})

	const textStyle = computed(() : UTSJSONObject => {
		return {
			fontSize: iconSize.value,
			color: iconColor.value,
			lineHeight: '1'
		}
	})

	const imageStyle = computed(() : UTSJSONObject => {
		return {
			width: iconSize.value,
			height: iconSize.value
		}
	})

	const svgStyle = computed(() : UTSJSONObject => {
		const style : UTSJSONObject = {
			width: iconSize.value,
			height: iconSize.value,
			backgroundSize: 'contain',
			backgroundRepeat: 'no-repeat',
			backgroundPosition: 'center'
		}

		// 设置 SVG 背景图片
		if (iconType.value == 'svg' && iconContent.value != '') {
			style.backgroundImage = `url(${iconContent.value})`
		}

		return style
	})




	// 事件处理
	function handleClick(event : UniEvent) {
		if (props.disabled || props.loading) {
			return
		}
		emit('click', event)
	}

	function handleImageError(error : UniError) {
		emit('error', error)
	}

	function handleImageLoad() {
		emit('load')
	}


	// 监听组件挂载
	onMounted(() => {
		// #ifdef APP
		// 如果需要旋转，启动动画
		if (props.loading || props.spin) {
			startRotateAnimation()
		}
		// #endif
	})

	// 监听组件卸载
	onBeforeUnmount(() => {
		// 停止动画
		stopRotateAnimation()
	})

	const load = computed(() => props.loading)
	watch(load, (loading : boolean) => {
		if (loading) {
			startRotateAnimation()
		} else {
			stopRotateAnimation()
		}
	})
	// 监听 loading 和 spin 属性变化
	// watch(props.loading,
	// 	(loading : boolean) => {
	// 		if (loading) {
	// 			startRotateAnimation()
	// 		} else {
	// 			stopRotateAnimation()
	// 		}
	// 	}
	// )
	const spin_speed = computed(() => props.spinSpeed)
	// 监听旋转速度变化
	watch(spin_speed,
		() => {
			// 如果正在旋转，重启动画以应用新速度
			if (props.loading || props.spin) {
				startRotateAnimation()
			}
		}
	)
</script>
<template>
	<view class="kit-ui--root k-icon" :class="iconClass" :style="iconStyle" @click="handleClick">
		<!-- 字体图标 -->
		<text v-if="iconType == 'text'" class="k-icon-font" :style="textStyle">{{ iconContent }}</text>
		<!-- 图片图标 -->
		<image v-else-if="iconType == 'image'" class="k-icon__image" :src="iconContent" :style="imageStyle" mode="aspectFit" @error="handleImageError" @load="handleImageLoad" />
		<!-- SVG 图标 (通过背景图片实现) -->
		<view v-else-if="iconType == 'svg'" class="k-icon__svg" :style="svgStyle"></view>
	</view>
</template>
<style lang="scss">
	@import "../../theme/index.scss";
	@import "./k-icon.scss";
</style>