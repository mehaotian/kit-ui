<script setup>
	import { TimelineChildType, TimelineItemChildType } from '../k-timeline-item/timeline-item.type.uts'

	/**
	 * k-timeline 时间轴组件
	 * 用于展示时间流信息
	 */

	// 注入主题配置
	const themeConfig = inject('kit-theme', {})

	const props = defineProps({
		// 时间轴模式: vertical, horizontal
		// mode: {
		// 	type: String,
		// 	default: 'vertical'
		// },
		// 时间轴方向: normal, reverse
		// direction: {
		// 	type: String,
		// 	default: 'normal'
		// },
		// 是否为交替模式 (仅垂直模式生效)
		alternate: {
			type: Boolean,
			default: false
		},
		// 是否显示 pending 状态
		pending: {
			type: Boolean,
			default: false
		},
		// pending 状态的文本
		pendingText: {
			type: String,
			default: '加载中...'
		},
		// pending 状态的图标
		pendingIcon: {
			type: String,
			default: 'loading'
		}
	})

	// // 定义 emits
	// const emit = defineEmits<{
	// 	itemClick : [item: TimelineItemChildType, event: any]
	// }>()

	// // 获取插槽
	// const slots = useSlots()

	// // 子组件实例列表
	let childs : TimelineItemChildType[] = []

	// // 计算时间轴样式类
	// const timelineClass = computed(() => {
	// 	const classes = ['k-timeline']

	// 	// 添加模式类
	// 	classes.push(`k-timeline--${props.mode}`)

	// 	// 添加方向类
	// 	classes.push(`k-timeline--${props.direction}`)

	// 	// 添加交替模式类
	// 	if (props.alternate && props.mode == 'vertical') {
	// 		classes.push('k-timeline--alternate')
	// 	}

	// 	// 添加 pending 状态类
	// 	if (props.pending) {
	// 		classes.push('k-timeline--pending')
	// 	}

	// 	return classes.join(' ')
	// })



	// // 移除子组件实例
	// const removeItem = (elId : string) => {
	// 	// const index = items.value.findIndex(item => item.elId == elId)
	// 	// if (index > -1) {
	// 	// 	items.value.splice(index, 1)
	// 	// 	updateItemsPosition()
	// 	// }
	// }

	// 更新子组件位置信息
	const updateItemsPosition = () => {
		childs.forEach((item : TimelineItemChildType, index : number) => {
			// 更新是否为最后一个节点
			item.isLast.value = index == childs.length - 1
			// 在交替模式下更新位置
			if (props.alternate) {
				item.position.value = index % 2 == 0 ? 'left' : 'right'
				console.log(item.position.value);
			}
		})
	}

	// // 处理子组件点击事件
	// const handleItemClick = (item : TimelineItemChildType, event : any) => {
	// 	emit('itemClick', item, event)
	// }

	// 组件实例
	// const timelineInstance : TimelineChildType = {
	// 	mode: props.mode,
	// 	direction: props.direction,
	// 	alternate: props.alternate,
	// 	pending: props.pending,
	// }

	// 添加子组件实例
	const registerItem = (child : TimelineItemChildType) => {
		console.log('-- 组件插入', child);
		childs.push(child)
		updateItemsPosition()
	}

	// 向子组件提供实例
	provide('k-timeline-alternate', props.alternate)
	provide('k-timeline-register', registerItem)

	// // 组件挂载后更新子组件位置
	// onMounted(() => {
	// 	updateItemsPosition()
	// })
</script>

<template>
	<!-- :class="timelineClass" -->
	<view>
		<!-- 时间轴内容 -->
		<view class="k-timeline__content">
			<slot></slot>
		</view>

		<!-- Pending 状态 -->
		<view class="k-timeline__pending" v-if="pending">
			<view class="k-timeline-item">
				<view class="k-timeline-item__content">
					<!-- 左侧内容 (alternate 模式) -->
					<view class="k-timeline-item__content-left" v-if="alternate">
						<text class="k-timeline-item__title">{{ pendingText }}</text>
					</view>

					<!-- 节点标记 -->
					<view class="k-timeline-item__node">
						<view class="k-timeline-item__dot k-timeline-item__dot--pending">
							<k-icon :name="pendingIcon" class="k-timeline-item__icon k-timeline-item__icon--pending"></k-icon>
						</view>
					</view>

					<!-- 右侧内容 (默认或 alternate 模式) -->
					<view class="k-timeline-item__content-right" v-if="!alternate">
						<text class="k-timeline-item__title">{{ pendingText }}</text>
					</view>
				</view>
			</view>
		</view>
	</view>
</template>

<style lang="scss">
	.k-timeline {
		position: relative;
		overflow: visible;

		&__content {
			position: relative;
			overflow: visible;
		}

		&__pending {
			margin-top: 0;
		}

		// 垂直模式 (默认)
		&--vertical {
			.k-timeline__content {
				display: flex;
				flex-direction: column;
			}
		}

		// 水平模式
		&--horizontal {
			.k-timeline__content {
				display: flex;
				flex-direction: row;
				align-items: flex-start;
				overflow-x: auto;
				overflow-y: visible;
			}

			.k-timeline-item {
				flex-shrink: 0;
				padding-right: 20px;
				padding-bottom: 0;

				&__content {
					flex-direction: column;
					align-items: center;
					min-width: 120px;
				}

				&__content-left,
				&__content-right {
					text-align: center;
					padding: 8px 0;
				}

				&__content-left {
					order: 2;
				}

				&__node {
					order: 1;
					flex-direction: row;
				}

				&__line {
					width: 100%;
					height: 2px;
					top: 50%;
					left: 12px;
					transform: translateY(-50%);
					min-height: auto;
					min-width: 20px;
				}
			}
		}

		// Pending 状态样式
		&--pending {
			.k-timeline-item__dot--pending {
				background-color: var(--k-color-primary, #6366f1);
				border-color: var(--k-color-primary, #6366f1);
				animation: k-timeline-pending 1.5s infinite;
			}

			.k-timeline-item__icon--pending {
				animation: k-timeline-spin 1s linear infinite;
			}
		}
	}

	// 动画定义
	@keyframes k-timeline-pending {
		0% {
			opacity: 0.3;
		}

		50% {
			opacity: 1;
		}

		100% {
			opacity: 0.3;
		}
	}

	@keyframes k-timeline-spin {
		from {
			transform: rotate(0deg);
		}

		to {
			transform: rotate(360deg);
		}
	}
</style>