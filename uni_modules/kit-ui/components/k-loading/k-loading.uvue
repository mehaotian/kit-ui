<script setup lang="uts">
	import { computed } from 'vue'
	import { parseLoadingSize, parseLoadingColor, LOADING_SIZES, LOADING_COLORS } from './utils.uts'
	import KLoadSpinner from './k-loading-spinner.uvue'
	import KLoadDots from './k-loading-dots.uvue'
	import KLoadBands from './k-loading-bands.uvue'
	import KLoadWave from './k-loading-wave.uvue'
	import KLoadPulse from './k-loading-pulse.uvue'





	// 组件属性定义
	const props = defineProps({
		// 加载样式类型：spinner(旋转圆圈)、dots(点状)、bands(带状动画)、wave(波浪动画)、pulse(脉冲)
		type: {
			type: String,
			default: 'spinner'
		},
		// 尺寸：xs, sm, md, lg, xl 或自定义数值（如 '24', '32px'）
		size: {
			type: String,
			default: 'md'
		},
		// 颜色主题：primary, success, warning, danger, info 或自定义颜色值
		color: {
			type: String,
			default: 'primary'
		},
		// 加载文本
		text: {
			type: String,
			default: ''
		},
		// 是否显示全屏遮罩
		overlay: {
			type: Boolean,
			default: false
		},
		// 遮罩背景色
		overlayColor: {
			type: String,
			default: 'rgba(0, 0, 0, 0.5)'
		},
		// 点击遮罩是否可关闭
		closeOnClickOverlay: {
			type: Boolean,
			default: false
		},
		// 自定义样式
		customStyle: {
			type: String,
			default: ''
		},
		// 是否垂直排列（图标在上，文字在下）
		vertical: {
			type: Boolean,
			default: true
		}
	})

	// 事件定义
	const emit = defineEmits<{
		close : []
	}>()

	// 计算加载器尺寸
	const loadingSize = computed(() : string => {
		return parseLoadingSize(props.size)
	})

	// 计算加载器数值尺寸（用于 load-circle 组件）
	const loadingSizeNumber = computed(() : number => {
		const sizeStr = parseLoadingSize(props.size)
		// 提取数值部分
		const numMatch = sizeStr.match(/\d+/)
		const mat1 = numMatch != null ? (numMatch[0] as string) : '24'
		return parseInt(mat1)
	})



	// 遮罩样式类
	const overlayClass = computed(() : string => {
		return 'k-loading-overlay'
	})

	// 容器样式类
	const containerClass = computed(() : string => {
		let classes = 'k-loading-container'
		if (props.vertical) {
			classes += ' k-loading-container--vertical'
		} else {
			classes += ' k-loading-container--horizontal'
		}
		return classes
	})

	// 容器样式
	const containerStyle = computed(() : string => {
		return ''
	})

	// 包装器样式类
	const wrapperClass = computed(() : string => {
		let classes = 'k-loading-wrapper'
		if (props.vertical) {
			classes += ' k-loading-wrapper--vertical'
		} else {
			classes += ' k-loading-wrapper--horizontal'
		}
		return classes
	})

	// 包装器样式
	const wrapperStyle = computed(() : string => {
		return props.customStyle
	})

	// 加载内容样式类
	const loadingClass = computed(() : string => {
		let classes = 'k-loading-content'
		// 只有预设尺寸才添加尺寸类
		if (props.size == 'xs' || props.size == 'sm' || props.size == 'md' || props.size == 'lg' || props.size == 'xl') {
			classes += ` k-loading-content--${props.size}`
		}
		return classes
	})

	// 加载内容样式
	const loadingStyle = computed(() : string => {
		let styles = ''
		// 处理自定义尺寸
		if (props.size != 'xs' && props.size != 'sm' && props.size != 'md' && props.size != 'lg' && props.size != 'xl') {
			let sizeValue = props.size
			// 如果是纯数字，添加px单位
			if (/^\d+$/.test(sizeValue)) {
				sizeValue += 'px'
			}
			styles += `width: ${sizeValue}; height: ${sizeValue};`
		}
		return styles
	})

	// 文本样式类
	const textClass = computed(() : string => {
		let classes = 'k-loading-text'
		// 只有预设尺寸才添加尺寸类
		if (props.size == 'xs' || props.size == 'sm' || props.size == 'md' || props.size == 'lg' || props.size == 'xl') {
			classes += ` k-loading-text--${props.size}`
		}
		// 添加颜色类
		if (props.color == 'primary' || props.color == 'success' || props.color == 'warning' || props.color == 'danger' || props.color == 'info') {
			classes += ` k-loading-text--${props.color}`
		}
		return classes
	})

	// 文本样式
	const textStyle = computed(() : string => {
		let styles = ''
		// 自定义颜色
		if (props.color != 'primary' && props.color != 'success' && props.color != 'warning' && props.color != 'danger' && props.color != 'info') {
			styles += `color: ${props.color};`
		}
		// 处理自定义尺寸的文本样式
		if (props.size != 'xs' && props.size != 'sm' && props.size != 'md' && props.size != 'lg' && props.size != 'xl') {
			let sizeValue = props.size
			// 如果是纯数字，添加px单位
			if (/^\d+$/.test(sizeValue)) {
				sizeValue += 'px'
			}
			// 解析数值用于计算文本大小
			const numericValue = parseFloat(sizeValue)
			if (!isNaN(numericValue)) {
				// 文本大小约为加载器尺寸的0.6倍
				const fontSize = Math.max(12, numericValue * 0.6)
				// 间距约为加载器尺寸的0.3倍
				const margin = Math.max(4, numericValue * 0.3)
				styles += `font-size: ${fontSize}px;`
				if (props.vertical) {
					styles += `margin-top: ${margin}px;`
				} else {
					styles += `margin-left: ${margin}px;`
				}
			}
		}
		return styles
	})

	// 处理遮罩点击事件
	const handleOverlayClick = () => {
		if (props.closeOnClickOverlay) {
			emit('close')
		}
	}
</script>

<template>
	<view v-if="overlay" class="k-loading-overlay" :class="overlayClass" @click="handleOverlayClick">
		<view class="k-loading-container" :class="containerClass" :style="containerStyle">
			<view class="k-loading-content" :class="loadingClass" :style="loadingStyle">
				<!-- Spinner 动画 -->
				<!-- <KLoadSpinner v-if="type === 'spinner'" :size="size" :color="color" /> -->

				<!-- Dots 动画 -->
				<!-- <k-loading-dots v-else-if="type === 'dots'" :size="size" :color="color" /> -->

				<!-- Bands 动画 -->
				<!-- <k-loading-bands v-else-if="type === 'bands'" :size="size" :color="color" /> -->

				<!-- Wave 动画 -->
				<!-- <k-loading-wave v-else-if="type === 'wave'" :size="size" :color="color" /> -->

				<!-- Pulse 动画 -->
				<!-- <k-loading-pulse v-else-if="type === 'pulse'" :size="size" :color="color" /> -->
			</view>

			<!-- 加载文本 -->
			<text v-if="text" class="k-loading-text" :class="textClass" :style="textStyle">{{ text }}</text>
		</view>
	</view>

	<!-- 非遮罩模式 -->
	<view v-else class="k-loading-wrapper" :class="wrapperClass" :style="wrapperStyle">
		<view class="k-loading-content" :class="loadingClass" :style="loadingStyle">
			<!-- Spinner 动画 -->
			<KLoadSpinner v-if="type === 'spinner'" :size="size" :color="color" />

			<!-- Dots 动画 -->
			<KLoadDots v-else-if="type === 'dots'" :size="size" :color="color" />

			<!-- Bands 动画 -->
			<KLoadBands v-else-if="type === 'bands'" :size="size" :color="color" />

			<!-- Wave 动画 -->
			<KLoadWave v-else-if="type === 'wave'" :size="size" :color="color" />

			<!-- Pulse 动画 -->
			<KLoadPulse v-else-if="type === 'pulse'" :size="size" :color="color" />
		</view>

		<!-- 加载文本 -->
		<text v-if="text" class="k-loading-text" :class="textClass" :style="textStyle">{{ text }}</text>
	</view>
</template>


<style lang="scss" scoped>
	@import './k-loading.scss';
</style>