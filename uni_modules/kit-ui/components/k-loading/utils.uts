/**
 * k-loading 组件工具函数
 */

// 预定义的加载器尺寸
export const LOADING_SIZES = new Map<string, string>([
  ['xs', '16px'],
  ['sm', '20px'],
  ['md', '24px'],
  ['lg', '32px'],
  ['xl', '40px']
])

// 预定义的加载器颜色
export const LOADING_COLORS = new Map<string, string>([
  ['primary', '#007AFF'],
  ['success', '#34C759'],
  ['warning', '#FF9500'],
  ['danger', '#FF3B30'],
  ['info', '#5AC8FA']
])

/**
 * 解析加载器尺寸
 * @param size 尺寸值，可以是预定义尺寸名称或自定义数值
 * @returns 解析后的尺寸字符串
 */
export function parseLoadingSize(size : string) : string {
  // 如果是预定义尺寸，返回对应的像素值
  if (LOADING_SIZES.has(size)) {
    return LOADING_SIZES.get(size)!
  }
  
  // 如果是纯数字，添加 px 单位
  const numericRegex = /^\d+$/
  if (numericRegex.test(size)) {
    return size + 'px'
  }
  
  // 其他情况直接返回（如 '24px', '1.5em' 等）
  return size
}

/**
 * 解析加载器颜色
 * @param color 颜色值，可以是预定义颜色名称或自定义颜色值
 * @returns 解析后的颜色字符串
 */
export function parseLoadingColor(color : string) : string {
  // 如果是预定义颜色，返回对应的颜色值
  if (LOADING_COLORS.has(color)) {
    return LOADING_COLORS.get(color)!
  }
  
  // 其他情况直接返回（如 '#FF0000', 'rgb(255, 0, 0)' 等）
  return color
}

/**
 * 获取文本尺寸
 * @param size 加载器尺寸
 * @returns 对应的文本尺寸
 */
export function getTextSize(size : string) : string {
  const sizeMap = new Map<string, string>([
    ['xs', '12px'],
    ['sm', '14px'],
    ['md', '16px'],
    ['lg', '18px'],
    ['xl', '20px']
  ])
  
  if (sizeMap.has(size)) {
    return sizeMap.get(size)!
  }
  
  // 对于自定义尺寸，文本尺寸为加载器尺寸的 0.6 倍
  const numericRegex = /^(\d+)(px)?$/
  const match = numericRegex.exec(size)
  if (match != null) {
    const num = parseInt(match[1])
    const textSize = Math.floor(num * 0.6)
    return textSize + 'px'
  }
  
  return '14px' // 默认文本尺寸
}

/**
 * 获取间距尺寸
 * @param size 加载器尺寸
 * @returns 对应的间距尺寸
 */
export function getSpacingSize(size : string) : string {
  const spacingMap = new Map<string, string>([
    ['xs', '4px'],
    ['sm', '6px'],
    ['md', '8px'],
    ['lg', '10px'],
    ['xl', '12px']
  ])
  
  if (spacingMap.has(size)) {
    return spacingMap.get(size)!
  }
  
  // 对于自定义尺寸，间距为加载器尺寸的 0.25 倍
  const numericRegex = /^(\d+)(px)?$/
  const match = numericRegex.exec(size)
  if (match != null) {
    const num = parseInt(match[1])
    const spacing = Math.floor(num * 0.25)
    return spacing + 'px'
  }
  
  return '8px' // 默认间距
}


/**
 * hex颜色转rgba
 */
export const hexToRgba = (hex : string, alpha : number) : string => {
	// 去除 # 符号（如果有的话）
	hex = hex.replace('#', '');
	let hexArray = hex.split('');
	// 检查颜色值长度，如果不符合预期则返回默认值或者抛出错误
	if (hexArray.length != 3 && hexArray.length != 6) {
		// 返回默认值或者抛出错误，这里使用默认值为黑色
		return 'rgba(0,0,0,1)';
		// 或者抛出错误
		// throw new Error('Invalid hex color value');
	}

	let extendedHex : string[] = [];

	if (hex.length == 3) {
		for (let i = 0; i < hexArray.length; i++) {
			extendedHex.push(hexArray[i]);
			extendedHex.push(hexArray[i]);
		}
		hexArray = extendedHex;
	}
	hex = ''
	for (let h = 0; h < hexArray.length; h++) {
		hex += hexArray[h]
	}

	// // 拆分颜色值为 R、G、B
	const r = parseInt(hex.substring(0, 2), 16);
	const g = parseInt(hex.substring(2, 4), 16);
	const b = parseInt(hex.substring(4, 6), 16);

	// // 返回 rgba 值
	return `rgba(${r},${g},${b},${alpha})`;
}

export const easeInOutCubic = (t : number) : number => {
	return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
}