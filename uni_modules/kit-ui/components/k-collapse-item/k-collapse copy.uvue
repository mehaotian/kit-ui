<script setup>
	import {
		inject,
		computed,
		ref,
		useSlots,
		watch,
		onMounted,
		onUnmounted
	} from 'vue'

	/**
	 * k-collapse 折叠面板组件
	 * 支持展开/收起、动画效果、禁用状态等功能
	 */

	// 注入主题配置
	const themeConfig = inject('kit-theme', {})

	// 定义 props
	const props = defineProps({
		// 面板标题
		title: {
			type: String,
			default: ''
		},
		// 是否展开
		expanded: {
			type: Boolean,
			default: false
		},
		// 是否禁用
		disabled: {
			type: Boolean,
			default: false
		},
		// 是否显示边框
		bordered: {
			type: Boolean,
			default: true
		},
		// 展开图标
		expandIcon: {
			type: String,
			default: 'arrow-down-s-line'
		},
		// 图标位置: left, right
		iconPosition: {
			type: String,
			default: 'right'
		},
		// 动画持续时间(ms)
		animationDuration: {
			type: Number,
			default: 200
		},
		// 自定义样式
		customStyle: {
			type: String,
			default: ''
		}
	})

	const slots = useSlots()

	// 是否有默认插槽
	const hasDefaultSlot = computed(() => {
		return slots['default'] != null
	})

	// 是否有标题插槽
	const hasTitleSlot = computed(() => {
		return slots['title'] != null
	})

	// 是否有图标插槽
	const hasIconSlot = computed(() => {
		return slots['icon'] != null
	})

	const emit = defineEmits(['update:expanded', 'change', 'click'])

	// 内部展开状态
	const isExpanded = ref(props.expanded)

	// 内容元素引用
	const contentRef = ref<UniElement | null>(null)
	const wrapperRef = ref<UniElement | null>(null)

	// 动画状态控制
	const isAnimating = ref(false)
	const animationTimer = ref<number | null>(null)

	// 监听 props.expanded 变化
	watch(() => props.expanded, (newVal) => {
		if (newVal != isExpanded.value) {
			isExpanded.value = newVal
			animateContent()
		}
	})

	// 内容变化检测定时器（用于动态内容场景）
	const contentCheckTimer = ref<number | null>(null)
	const lastContentHeight = ref<number>(0)

	// 开始内容变化检测
	const startContentCheck = () => {
		if (contentCheckTimer.value != null) {
			return
		}

		contentCheckTimer.value = setInterval(() => {
			if (contentRef.value != null && isExpanded.value && !isAnimating.value) {
				const currentHeight = contentRef.value.getBoundingClientRect().height
				if (Math.abs(currentHeight - lastContentHeight.value) > 1) {
					lastContentHeight.value = currentHeight
					// 内容高度变化，重新调整包装器高度
					if (wrapperRef.value != null) {
						wrapperRef.value.style.setProperty('height', currentHeight + 'px')
					}
				}
			}
		}, 200) // 每200ms检查一次
	}

	// 停止内容变化检测
	const stopContentCheck = () => {
		if (contentCheckTimer.value != null) {
			clearInterval(contentCheckTimer.value)
			contentCheckTimer.value = null
		}
	}

	// 动画内容展开/收起
	const animateContent = () => {
		// 防止重复动画
		if (isAnimating.value) {
			return
		}

		// 检查元素是否存在
		if (wrapperRef.value == null || contentRef.value == null) {
			console.warn('k-collapse: 动画元素未找到')
			return
		}

		try {
			isAnimating.value = true

			// 获取当前和目标高度
			const currentRect = wrapperRef.value.getBoundingClientRect()
			const contentRect = contentRef.value.getBoundingClientRect()
			const currentHeight = currentRect.height
			const targetHeight = isExpanded.value ? contentRect.height : 0

			// 如果高度相同，直接返回
			if (Math.abs(currentHeight - targetHeight) < 1) {
				isAnimating.value = false
				return
			}

			// 执行动画
			wrapperRef.value.animate([
				{ height: currentHeight + 'px' },
				{ height: targetHeight + 'px' }
			], {
				duration: props.animationDuration,
				fill: 'forwards'
			})

			// 动画完成后重置状态
			if (animationTimer.value != null) {
				clearTimeout(animationTimer.value)
			}
			animationTimer.value = setTimeout(() => {
				isAnimating.value = false
				animationTimer.value = null
			}, props.animationDuration)

		} catch (error) {
			console.error('k-collapse: 动画执行失败', error)
			isAnimating.value = false
		}
	}

	// 计算折叠面板动态样式
	const collapseStyle = computed(() => {
		// 如果有注入的主题配置，生成对应的 CSS 变量
		const styles: string[] = []
		// 遍历主题配置，生成 CSS 变量
		for (let key in themeConfig) {
			const value = themeConfig[key]
			if (key != 'mode' && value != null) {
				// 将驼峰命名转换为 kebab-case
				const cssVar = key.replace(/([A-Z])/g, '-$1').toLowerCase()
				styles.push(`--k-${cssVar}: ${value}`)
			}
		}

		// 添加动画持续时间
		styles.push(`--k-collapse-duration: ${props.animationDuration}ms`)

		// 添加自定义样式
		if (props.customStyle != '') {
			styles.push(props.customStyle)
		}

		return styles.join('; ')
	})

	// 计算图标旋转角度
	const iconRotation = computed(() => {
		return isExpanded.value ? 180 : 0
	})

	// 防抖定时器
	const debounceTimer = ref<number | null>(null)

	// 切换展开状态（带防抖）
	const toggle = () => {
		if (props.disabled || isAnimating.value) {
			return
		}

		// 防抖处理
		if (debounceTimer.value != null) {
			clearTimeout(debounceTimer.value)
		}

		debounceTimer.value = setTimeout(() => {
			const newState = !isExpanded.value
			isExpanded.value = newState
			animateContent()
			// 触发事件
			emit('change', newState)
			debounceTimer.value = null
		}, 50) // 50ms 防抖
	}

	// 组件挂载后初始化
	onMounted(() => {
		if (wrapperRef.value != null) {
			// 设置初始高度
			if (!isExpanded.value) {
				wrapperRef.value.style.setProperty('height', '0px')
			} else {
				// 记录初始内容高度
				if (contentRef.value != null) {
					lastContentHeight.value = contentRef.value.getBoundingClientRect().height
				}
			}
		}
		// 开始内容变化检测
		startContentCheck()
	})

	// 组件销毁时清理
	onUnmounted(() => {
		// 清理动画定时器
		if (animationTimer.value != null) {
			clearTimeout(animationTimer.value)
			animationTimer.value = null
		}
		// 清理防抖定时器
		if (debounceTimer.value != null) {
			clearTimeout(debounceTimer.value)
			debounceTimer.value = null
		}
		// 停止内容变化检测
		stopContentCheck()
		// 重置动画状态
		isAnimating.value = false
	})

	// 点击头部处理函数
	const handleHeaderClick = () => {
		if (props.disabled || isAnimating.value) {
			return
		}
		emit('click')
		toggle()
	}

</script>

<template>
	<view class="kit-ui--root k-collapse" :class="[
			{
				'k-collapse--expanded': isExpanded,
				'k-collapse--disabled': disabled,
				'k-collapse--bordered': bordered
			}
		]" :style="collapseStyle">
		<!-- 折叠面板头部 -->
		<view 
			class="k-collapse__header" 
			:class="{ 
				'k-collapse__header--disabled': props.disabled,
				'k-collapse__header--expanded': isExpanded
			}" 
			@click="handleHeaderClick"
		>
			<!-- 左侧图标 -->
			<view v-if="iconPosition === 'left'" class="k-collapse__icon k-collapse__icon--left">
				<slot name="icon">
					<k-icon 
						:name="expandIcon" 
						size="16" 
						color="var(--k-text-color-secondary, #6b7280)"
						:style="`transform: rotate(${iconRotation}deg); transition: transform var(--k-collapse-duration, 300ms) ease;`"
					/>
				</slot>
			</view>

			<!-- 标题内容 -->
			<view class="k-collapse__title">
				<slot name="title">
					<text class="k-collapse__title-text">{{ props.title }}</text>
				</slot>
			</view>

			<!-- 右侧图标 -->
			<view v-if="iconPosition === 'right'" class="k-collapse__icon k-collapse__icon--right">
				<slot name="icon">
					<k-icon 
						:name="expandIcon" 
						size="16" 
						color="var(--k-text-color-secondary, #6b7280)"
						:style="`transform: rotate(${iconRotation}deg); transition: transform var(--k-collapse-duration, 300ms) ease;`"
					/>
				</slot>
			</view>
		</view>

		<!-- 折叠面板内容 -->
		<view ref="wrapperRef" class="k-collapse__content-wrapper">
			<view ref="contentRef" class="k-collapse__content">
				<slot></slot>
			</view>
		</view>
	</view>
</template>

<style lang="scss" scoped>
	@import "../../theme/index.scss";

	.k-collapse {
		display: flex;
		flex-direction: column;
		position: relative;
		box-sizing: border-box;
		background-color: var(--k-bg-color, #ffffff);
		overflow: hidden;

		// 边框样式
		&--bordered {
			border: 1px solid var(--k-border-color-light, #f3f4f6);
			border-top-left-radius: var(--k-border-radius-md, 8px);
			border-top-right-radius: var(--k-border-radius-md, 8px);
			border-bottom-left-radius: var(--k-border-radius-md, 8px);
			border-bottom-right-radius: var(--k-border-radius-md, 8px);
		}

		// 展开状态
		&--expanded {
			.k-collapse__header {
				border-bottom: 1px solid var(--k-border-color-light, #f3f4f6);
			}
		}

		// 禁用状态
		&--disabled {
			opacity: 0.6;

			.k-collapse__header {
				/* #ifdef WEB */
				cursor: not-allowed;
				/* #endif */
			}
		}

		// 折叠面板头部
		&__header {
			display: flex;
			flex-direction: row;
			align-items: center;
			padding-top: var(--k-spacing-base, 12px);
			padding-bottom: var(--k-spacing-base, 12px);
			padding-left: var(--k-spacing-base, 12px);
			padding-right: var(--k-spacing-base, 12px);
			background-color: var(--k-bg-color, #ffffff);
			transition: all var(--k-transition-duration-base, 0.3s) ease;

			/* #ifdef WEB */
			cursor: pointer;

			&:hover {
				background-color: var(--k-bg-color-hover, #f9fafb);
			}
			/* #endif */

			/* 禁用状态 */
			&--disabled {
				/* #ifdef WEB */
				cursor: not-allowed;
				/* #endif */
				opacity: 0.6;
				background-color: var(--k-collapse-header-disabled-bg, #f5f5f5);
			}

			/* 展开状态 */
			&--expanded {
				background-color: var(--k-collapse-header-active-bg, #f0f0f0);
			}
		}

		// 标题
		&__title {
			display: flex;
			flex-direction: column;
			flex: 1;
			min-width: 0;
		}

		&__title-text {
			font-size: var(--k-font-size-md, 12px);
			color: var(--k-text-color-primary, #1f2937);
			line-height: 1.4;
		}

		// 图标
		&__icon {
			display: flex;
			align-items: center;
			justify-content: center;
			width: 24px;
			height: 24px;

			&--left {
				margin-right: var(--k-spacing-sm, 8px);
			}

			&--right {
				margin-left: var(--k-spacing-sm, 8px);
			}
		}

		// 内容包装器
		&__content-wrapper {
			overflow: hidden;
			height: 0;
			transition: height var(--k-collapse-duration, 300ms) ease;

			// 展开状态的内容包装器
			&--expanded {
				height: auto;
			}
		}

		// 内容区域
		&__content {
			padding-top: var(--k-spacing-base, 12px);
			padding-bottom: var(--k-spacing-base, 12px);
			padding-left: var(--k-spacing-base, 12px);
			padding-right: var(--k-spacing-base, 12px);
			color: var(--k-text-color-regular, #374151);
			font-size: var(--k-font-size-sm, 12px);
			line-height: 1.5;
		}
	}
</style>