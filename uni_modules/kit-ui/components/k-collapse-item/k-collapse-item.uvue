<script setup lang="uts">
	/**
	 * k-collapse 折叠面板组件
	 * 支持展开/收起、动画效果、禁用状态等功能
	 */

	import { onMounted } from 'vue'

	defineOptions({
		name: "KCollapseItem"
	})
	let collapseInstance = null as KCollapseComponentPublicInstance | null
	// 注入主题配置
	const themeConfig = inject('kit-theme', {})

	// 定义 props
	const props = defineProps({
		// 面板标题
		title: {
			type: String,
			default: ''
		},
		// 唯一标识
		name: {
			type: [String, Number],
			default: ''
		},
		// 是否展开
		expanded: {
			type: Boolean,
			default: false
		},
		// 是否禁用
		disabled: {
			type: Boolean,
			default: false
		},
		// 是否显示边框
		border: {
			type: Boolean,
			default: true
		},
		// 展开图标
		expandIcon: {
			type: String,
			default: 'arrow-down-s-line'
		},
		// 图标位置: left, right
		iconPosition: {
			type: String,
			default: 'right'
		},
		// 自定义样式
		customStyle: {
			type: String,
			default: ''
		}
	})

	const collapseChild = inject<((child : KCollapseComponentPublicInstance) => string) | null>('k-collapse-child-init', null)
	const collapseToggle = inject<(() => string) | null>('k-collapse-child-toggle', null)

	const slots = useSlots()

	// 是否显示边框
	let isBorder = ref<boolean | null>(null)

	// 判断是否显示边框
	const showBorder = computed(() : boolean => {
		// 优先判断是否最后一个，最后一个不允许显示标框
		if (isBorder.value != null) {
			return isBorder.value
		}
		// 优先使用组件自身的 border 属性
		if (props.border != null) {
			return props.border
		}
		return true
	})


	// 是否有默认插槽
	const hasDefaultSlot = computed(() => {
		return slots['default'] != null
	})

	// 是否有标题插槽
	const hasTitleSlot = computed(() => {
		return slots['title'] != null
	})

	// 是否有图标插槽
	const hasIconSlot = computed(() => {
		return slots['icon'] != null
	})

	const emit = defineEmits(['update:expanded', 'change', 'click'])

	// 内部展开状态
	const isExpanded = ref(props.expanded)

	// 内容元素引用
	const contentRef = ref<UniElement | null>(null)
	const wrapperRef = ref<UniElement | null>(null)

	const lastContentHeight = ref<number>(0)

	// 动画内容展开/收起
	const animateContent = (show : boolean) => {
		// 检查元素是否存在
		if (wrapperRef.value == null || contentRef.value == null) {
			console.warn('k-collapse: 动画元素未找到')
			return
		}

		// 获取当前和目标高度
		const height = lastContentHeight.value
		const cNode = wrapperRef.value?.style!;
		if (show) {
			cNode.setProperty('height', height + 'px')
		} else {
			cNode.setProperty('height', 0 + 'px')
		}
	}

	// 计算折叠面板动态样式
	const collapseStyle = computed(() => {
		// 如果有注入的主题配置，生成对应的 CSS 变量
		const styles : string[] = []
		// 遍历主题配置，生成 CSS 变量
		for (let key in themeConfig) {
			const value = themeConfig[key]
			if (key != 'mode' && value != null) {
				// 将驼峰命名转换为 kebab-case
				const cssVar = key.replace(/([A-Z])/g, '-$1').toLowerCase()
				styles.push(`--k-${cssVar}: ${value}`)
			}
		}

		// 添加自定义样式
		if (props.customStyle != '') {
			styles.push(props.customStyle)
		}

		return styles.join('; ')
	})

	// 计算图标旋转角度
	const iconRotation = computed(() => {
		return isExpanded.value ? 180 : 0
	})

	// 防抖定时器
	const debounceTimer = ref<number | null>(null)

	const expanded = computed(() => props.expanded)

	watch(expanded, (newVal : boolean) => {
		if (wrapperRef.value == null || contentRef.value == null) return
		isExpanded.value = newVal
		if (isExpanded.value) {
			animateContent(true)
		}
	}, {
		immediate: true
	})

	/**
	 * 获取组件实例
	 */
	function getInstance() : KCollapseComponentPublicInstance | null {
		if (getCurrentInstance() != null) {
			// 只能在 onMounted 后获取 exposed , 确保获取时机
			// #ifdef APP
			collapseInstance = getCurrentInstance()!.proxy! as KCollapseComponentPublicInstance
			// #endif
			// #ifndef APP
			collapseInstance = getCurrentInstance()!.exposed! as KCollapseComponentPublicInstance
			// #endif
		}
		return collapseInstance
	}

	// 组件挂载后初始化
	onMounted(() => {
		if (wrapperRef.value != null && contentRef.value != null) {
			// const currentRect = wrapperRef.value.getBoundingClientRect()
			const contentRect = contentRef.value.getBoundingClientRect()
			lastContentHeight.value = contentRect.height
			// 初始化打开状态
			isExpanded.value = props.expanded
			if (isExpanded.value) {
				animateContent(true)
			}
		}

		// 与父组件交互，
		if (collapseChild != null) {
			// 获取父子组件实例通信
			let instance = getInstance()
			if (instance != null) {
				collapseChild(instance)
			}
		}
	})

	// 组件销毁时清理
	onUnmounted(() => { })

	// 点击头部处理函数
	const handleHeaderClick = () => {
		if (props.disabled) {
			return
		}
		if (collapseToggle != null) {
			collapseToggle()
		}

		isExpanded.value = !isExpanded.value
		animateContent(isExpanded.value)
		emit('click')
	}

	// 处理border
	function initBorder() {
		// 这是最后一个不显示 边框
		isBorder.value = false
	}
	function initBorderNull() {
		isBorder.value = null
	}
	defineExpose({
		initBorder,
		initBorderNull,
		animateContent,
		isExpanded,
		name: props.name
	})
</script>

<template>
	<view class="kit-ui--root k-collapse" :class="[
			{
				'k-collapse--expanded': isExpanded,
				'k-collapse--disabled': disabled,
				'k-collapse--bordered': showBorder
			}
		]" :style="collapseStyle">
		<!-- 折叠面板头部 -->
		<view class="k-collapse__header" :class="{ 
				'k-collapse__header--disabled': props.disabled,
				'k-collapse__header--expanded': isExpanded
			}" @click="handleHeaderClick">
			<!-- 左侧图标 -->
			<view v-if="iconPosition === 'left'" class="k-collapse__icon k-collapse__icon--left">
				<slot name="icon">
					<k-icon :name="expandIcon" size="16" color="var(--k-text-color-secondary, #6b7280)" :style="`transform: rotate(${iconRotation}deg); transition: transform var(--k-collapse-duration, 300ms) ease;`" />
				</slot>
			</view>

			<!-- 标题内容 -->
			<view class="k-collapse__title">
				<slot name="title">
					<text class="k-collapse__title-text">{{ props.title }}</text>
				</slot>
			</view>
			<!-- 右侧图标 -->
			<view v-if="iconPosition === 'right'" class="k-collapse__icon k-collapse__icon--right">
				<slot name="icon">
					<k-icon :name="expandIcon" size="16" color="var(--k-text-color-secondary, #6b7280)" :style="`transform: rotate(${iconRotation}deg); transition: transform var(--k-collapse-duration, 300ms) ease;`" />
				</slot>
			</view>
		</view>

		<!-- 折叠面板内容 -->
		<view ref="wrapperRef" class="k-collapse__content-wrapper">
			<view ref="contentRef" class="k-collapse__content">
				<slot></slot>
			</view>
		</view>
	</view>
</template>

<style lang="scss" scoped>
	@import "../../theme/index.scss";

	.k-collapse {
		display: flex;
		flex-direction: column;
		position: relative;
		box-sizing: border-box;
		background-color: var(--k-bg-color, #ffffff);
		overflow: hidden;

		// 边框样式
		&--bordered {
			border-bottom: 1px solid var(--k-border-color-light, #f3f4f6);
			// border-top-left-radius: var(--k-border-radius-md, 8px);
			// border-top-right-radius: var(--k-border-radius-md, 8px);
			// border-bottom-left-radius: var(--k-border-radius-md, 8px);
			// border-bottom-right-radius: var(--k-border-radius-md, 8px);
		}

		// 展开状态
		&--expanded {
			.k-collapse__header {
				border-bottom: 1px solid var(--k-border-color-light, #f3f4f6);
			}
		}

		// 禁用状态
		&--disabled {
			opacity: 0.6;

			.k-collapse__header {
				/* #ifdef WEB */
				cursor: not-allowed;
				/* #endif */
			}
		}

		// 折叠面板头部
		&__header {
			display: flex;
			flex-direction: row;
			align-items: center;
			// padding-top: var(--k-spacing-base, 12px);
			// padding-bottom: var(--k-spacing-base, 12px);
			// padding-left: var(--k-spacing-base, 12px);
			// padding-right: var(--k-spacing-base, 12px);
			background-color: var(--k-bg-color, #ffffff);
			transition: all var(--k-transition-duration-base, 0.3s) ease;
			border: 1px transparent solid;
			/* #ifdef WEB */
			cursor: pointer;
			/* #endif */

			/* 禁用状态 */
			&--disabled {
				/* #ifdef WEB */
				cursor: not-allowed;
				/* #endif */
				opacity: 0.6;
				background-color: var(--k-collapse-header-disabled-bg, #f5f5f5);
			}

			/* 展开状态 */
			// &--expanded {
			// 	background-color: var(--k-collapse-header-active-bg, #f0f0f0);
			// }
		}

		// 标题
		&__title {
			display: flex;
			flex-direction: column;
			flex: 1;
			min-width: 0;
		}

		&__title-text {
			padding-top: var(--k-spacing-base, 12px);
			padding-bottom: var(--k-spacing-base, 12px);
			padding-left: var(--k-spacing-base, 12px);
			font-size: 14px;
			color: var(--k-text-color-primary, #1f2937);
			line-height: 1.4;
		}

		// 图标
		&__icon {
			display: flex;
			align-items: center;
			justify-content: center;
			width: 24px;
			height: 24px;

			&--left {
				// margin-right: var(--k-spacing-sm, 8px);
				margin-left: var(--k-spacing-base, 12px);
			}

			&--right {
				margin-left: var(--k-spacing-sm, 8px);
				margin-right: var(--k-spacing-sm, 8px);
			}
		}

		// 内容包装器
		&__content-wrapper {
			overflow: hidden;
			height: 0;
			// transition: height var(--k-collapse-duration, 300ms) ease;
			transition-property: height;
			transition-duration: .3s;
			will-change: height;

			// 展开状态的内容包装器
			&--expanded {
				height: auto;
			}
		}

		// 内容区域
		&__content {
			padding-top: var(--k-spacing-base, 12px);
			padding-bottom: var(--k-spacing-base, 12px);
			padding-left: var(--k-spacing-base, 12px);
			padding-right: var(--k-spacing-base, 12px);
			color: var(--k-text-color-regular, #374151);
			font-size: var(--k-font-size-sm, 12px);
			line-height: 1.5;
		}
	}
</style>