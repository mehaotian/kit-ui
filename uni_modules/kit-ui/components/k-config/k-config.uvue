<template>
	<view>
		<slot></slot>
	</view>
</template>

<script setup>
	import { computed, provide, reactive, watchEffect, watch } from 'vue'

	const props = defineProps<{
		// 主题配置对象
		theme ?: UTSJSONObject | null,
		// 主题模式: light, dark
		mode ?: 'light' | 'dark'
	}>()

	let themeTempObj = {}
	if (props.theme != null) {
		themeTempObj = UTSJSONObject.assign(themeTempObj, props.theme)
	}

	// 创建响应式主题配置
	let themeConfig = reactive({
		mode: props.mode ?? 'light',
		...themeTempObj
	})

	// watchEffect(() => {
	// 	const theme = props.theme
	// 	console.log('++++++', theme);
	// })
	let watchTheme = reactive<UTSJSONObject>({})
	if(props.theme != null){
		watchTheme = props.theme
	}

	watch(() : UTSJSONObject => watchTheme, (theme : UTSJSONObject) => {
		for (let key in theme) {
			if (key == 'mode') {
				continue
			}
			themeConfig[key] = theme[key]
		}
	}, { deep: true, immediate: false })
	
	let watchMode = ref('')
	if(props.mode !=null) {
		watchMode.value = props.mode
	}
	watch(
		() : string  => watchMode.value,
		(newMode : string) => {
			// // 更新配置
			themeConfig['mode'] = newMode
		},
		{ deep: true, immediate: false }
	)

	// 提供主题配置给子组件
	provide('kit-theme', themeConfig)
	
</script>

<style>

</style>