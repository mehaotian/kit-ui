<template>
	<view>
		{{model}}
		<slot></slot>
	</view>
</template>

<script setup lang="uts">
	defineOptions({
		name: "KCollapse"
	})
	const props = defineProps({
		// // 是否开启手风琴模式
		accordion: {
			type: Boolean,
			default: false
		}
	})

	// 子组件实例
	let childs : KCollapseItemComponentPublicInstance[] = []

	/**
	 * 子组件边框调整
	 */
	function handleChild() {
		if (childs.length > 0) {
			// 先清空所有 border 属性
			childs.forEach((item : KCollapseItemComponentPublicInstance) => {
				item.initBorderNull()
			})
			// 在设置最后一个border为false，避免border设置冲突
			const lastChild = childs[childs.length - 1]
			lastChild.initBorder()
		}
	}

	/**
	 * 初始化子组件
	 */
	function childInit(child : KCollapseItemComponentPublicInstance) : string {
		childs.push(child)
		handleChild()
		return ''
	}

	/**
	 * 手风琴切换效果
	 */
	function toggle() {
		const accordion = props.accordion as boolean
		if (!accordion) return
		// 为了节省性能，只需要查找已经打开的子组件，将其关闭
		childs.forEach((child : KCollapseItemComponentPublicInstance) => {
			const isShow = child.isExpanded.value
			// 如果打开了，需要关闭
			if (isShow) {
				child.isExpanded.value = false
				child.animateContent(false)
			}
		})
	}

	provide('k-collapse-child-init', childInit)
	provide('k-collapse-child-toggle', toggle)
</script>

<style>

</style>