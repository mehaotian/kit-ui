<script setup>
	import { TimelineChildType, TimelineItemChildType } from './timeline-item.type.uts'

	/**
	 * k-timeline-item 时间轴节点组件
	 * 用于展示时间轴中的单个节点
	 */


	// 定义 props
	const props = defineProps({
		// 左侧标签
		label: {
			type: String,
			default: ''
		},
		// 节点标题
		title: {
			type: String,
			default: ''
		},
		// 节点描述
		description: {
			type: String,
			default: ''
		},
		// 节点时间
		time: {
			type: String,
			default: ''
		},
		// 节点状态: wait, process, finish, error
		status: {
			type: String,
			default: ''
		},
		// 节点颜色 ，primary success warning error info 
		color: {
			type: String,
			default: ''
		},
		// 节点位置: left, right (仅在 alternate 模式下生效)
		position: {
			type: String,
			default: 'left'
		},
		// 自定义图标
		icon: {
			type: String,
			default: ''
		},
		// 图标颜色
		iconColor: {
			type: String,
			default: '#fff'
		},
		showCircle: {
			type: Boolean,
			default: true
		},
		// 是否禁用
		disabled: {
			type: Boolean,
			default: false
		}
	})


	// 注入主题配置
	const themeConfig = inject('kit-theme', {})

	// 注入父组件实例
	const timelineRegister = inject<((child : TimelineItemChildType) => string) | null>('k-timeline-register', null)
	const timelineAlternate = inject<boolean>('k-timeline-alternate', false)
	const timelineLabelWidth = inject<number>('k-timeline-label-width', 90)
	const timelineShowLabel = inject<Ref<boolean>>('k-timeline-show-label')
	const showLabel = computed(() => timelineShowLabel?.value ?? false)

	// 定义 emits
	const emit = defineEmits<{
		click : [event: any]
	}>()

	// 生成唯一ID
	const elId = ref(`timeline-item-${Math.ceil(Math.random() * 10e5).toString(36)}`)

	// 是否为最后一个节点
	const isLast = ref(false)
	const domPosi = ref('right')


	// 计算 label 样式
	const labelStyle = computed(() => {
		const width = timelineLabelWidth ?? 90
		return {
			width: `${width}px`,
			minWidth: `${width}px`
		}
	})

	// 计算节点样式类
	const itemClass = computed(() => {
		const classes = ['k-timeline-item']

		// 添加状态类
		classes.push(`k-timeline-item--${props.status}`)

		// 添加位置类
		classes.push(`k-timeline-item--${props.position}`)

		// 添加禁用类
		if (props.disabled) {
			classes.push('k-timeline-item--disabled')
		}

		// 添加最后一个节点类
		if (isLast.value) {
			classes.push('k-timeline-item--last')
		}

		return classes.join(' ')
	})

	function getColor(type : string) {
		const style : UTSJSONObject = {}

		// 预设颜色映射
		const colorMap : UTSJSONObject = {
			'primary': 'var(--k-color-primary, #6366f1)',
			'success': 'var(--k-color-success, #10b981)',
			'warning': 'var(--k-color-warning, #f59e0b)',
			'error': 'var(--k-color-error, #ef4444)',
			'info': 'var(--k-color-info, #06b6d4)'
		}

		// 设置节点颜色

		let nodeColor = props.color
		if (colorMap[props.color] != null) {
			nodeColor = colorMap[props.color] as string
		}

		// 处理 app 默认值问题，如果没有默认值，则不会显示css样式
		if (nodeColor != '') {
			if (type == 'title') {
				style['color'] = nodeColor
			} else {
				style['background-color'] = nodeColor
			}
			return style
		}

		return ''
	}

	// 计算节点颜色样式
	const nodeStyle = computed(() => {
		return getColor('bg')
	})

	const titleStyle = computed(() => {
		return getColor('title')
	})

	// 计算图标名称
	const iconName = computed(() => {
		if (props.icon != '') {
			return props.icon
		}

		// 根据状态返回默认图标
		const iconMap : UTSJSONObject = {
			'wait': 'time-line',
			'process': 'loader-2-fill',
			'finish': 'check-fill',
			'error': 'close-fill'
		}
		// return iconMap[props.status] as string ?? ''
		if (iconMap[props.status] != null) {
			return iconMap[props.status] as string
		}
		return ''
	})

	// 处理点击事件
	const handleClick = (event : any) => {
		if (props.disabled) return
		emit('click', event)
	}

	let labelWidth = ref(0)

	// 组件挂载时注册到父组件
	onMounted(() => {
		const itemInstance : TimelineItemChildType = {
			elId: elId.value,
			name: props.title,
			status: props.status,
			color: props.color,
			position: domPosi,
			isLast: isLast,
			label: props.label
		}

		if (timelineRegister != null) {
			timelineRegister(itemInstance)
		}

	})

	// 组件卸载时从父组件移除
	onUnmounted(() => {
		// if (timelineInstance != null) {
		// 	timelineRegister.removeItem(elId.value)
		// }
	})
</script>

<template>
	<view class="k-timeline-item" :class="itemClass" @tap="handleClick">
		<!-- 节点内容容器 -->
		<view class="k-timeline-item__content">
			<!-- 左侧标签区域 -->
			<view v-if="showLabel && !timelineAlternate" :id="'content_' + elId" class="k-timeline-item__label" :style="labelStyle">
				<text class="k-timeline-item__label-text" v-if="label">{{ label }}</text>
			</view>

			<view v-if="domPosi == 'left'" class="k-timeline-item__content-main" :class="[domPosi]">
				<view class="k-timeline-item__header" v-if="title != '' || time != ''">
					<text class="k-timeline-item__title" :style="titleStyle" v-if="title != ''">{{ title }}</text>
					<text class="k-timeline-item__time" v-if="time != ''">{{ time }}</text>
				</view>
				<text class="k-timeline-item__description" v-if="description">{{ description }}</text>
				<slot></slot>
			</view>
			<view v-if="timelineAlternate && domPosi == 'right'" class="k-timeline-item__content-main"></view>
			<!-- 节点标记 -->
			<view class="k-timeline-item__node">
				<slot name="node">
					<view v-if="showCircle" class="k-timeline-item__dot" :style="nodeStyle">
						<k-icon v-if="iconName != ''" :name="iconName" size="14px" :color="iconColor" class="k-timeline-item__icon"></k-icon>
						<view v-else class="k-timeline-item__circle"></view>
					</view>
					<view v-else class="k-timeline-item__dot-nobg">
						<k-icon v-if="iconName != ''" :name="iconName" size="14px" :color="iconColor" class="k-timeline-item__icon"></k-icon>
						<view v-else class="k-timeline-item__circle"></view>
					</view>
				</slot>
				
				<view class="k-timeline-item__line" v-if="!isLast"></view>
			</view>
			<!-- 内容区域 -->
			<view v-if="domPosi == 'right'" class="k-timeline-item__content-main">
				<view class="k-timeline-item__header" v-if="title != '' || time != ''">
					<text class="k-timeline-item__title" :style="titleStyle" v-if="title != ''">{{ title }}</text>
					<text class="k-timeline-item__time" v-if="time != ''">{{ time }}</text>
				</view>
				<text class="k-timeline-item__description" v-if="description">{{ description }}</text>
				<slot></slot>
			</view>
			<view v-if="timelineAlternate && domPosi == 'left'" class="k-timeline-item__content-main"></view>
		</view>

	</view>
</template>

<style lang="scss">
	.k-timeline-item {
		position: relative;
		// padding-bottom: 16px;
		overflow: visible;

		&__content {
			display: flex;
			flex-direction: row;
			align-items: flex-start;
			overflow: visible;
		}

		&__label {
			display: flex;
			// align-items: center;
			// justify-content: flex-end;
			padding-right: 12px;
			flex-shrink: 0;
		}

		&__label-text {
			font-size: 14px;
			color: var(--k-text-color-secondary, #666666);
			text-align: right;
			line-height: 1.5;
		}

		&__content-left {
			flex: 1;
			padding: 0 16px;
			min-height: 40px;
			text-align: right;
		}

		&__content-right {
			flex: 1;
			padding: 0 16px;
			min-height: 40px;
			// text-align: left;
		}

		&__content-main {
			flex: 1;
			padding: 0 16px;
			min-height: 40px;
			// text-align: left;
			padding-bottom: 24rpx;
			padding-right: 0;
		}

		&__node {
			position: relative;
			display: flex;
			flex-direction: column;
			align-items: center;
			z-index: 2;
			overflow: visible;
			min-width: 24px;
			height: 100%;
		}

		&__dot {
			display: flex;
			align-items: center;
			justify-content: center;
			width: 16px;
			height: 16px;
			border-radius: 100px;
			// border: 3px solid var(--k-color-primary, #6366f1);
			background-color: var(--k-color-primary, #6366f1);
			z-index: 3;
			position: absolute;
			top: 2px;
			left: 50%;
			transform: translateX(-50%);
		}
		
		&__dot-nobg {
			width: 18px;
			height: 18px;
			display: flex;
			align-items: center;
			justify-content: center;
			z-index: 3;
			position: absolute;
			top: 2px;
			left: 50%;
			transform: translateX(-50%);
		}

		&__circle {
			width: 10px;
			height: 10px;
			background-color: #ffffff;
			border-radius: 20px;
		}

		&__line {
			width: 2px;
			background-color: var(--k-border-color, #e5e7eb);
			position: absolute;
			top: 18px;
			left: 50%;
			transform: translateX(-50%);
			bottom: -2px;
			z-index: 1;
			// height: 100%;
		}

		&__header {
			display: flex;
			flex-direction: column;
			margin-bottom: 4px;
			overflow: hidden;
		}

		&__title {
			font-size: var(--k-font-size-base, 14px);
			font-weight: bold;
			color: var(--k-text-color, #374151);
			line-height: 1.5;
			flex: 1;
		}

		&__time {
			font-size: var(--k-font-size-sm, 12px);
			color: var(--k-text-color-secondary, #6b7280);
			line-height: 1.5;
			// margin-left: 20rpx;
		}

		&__description {
			font-size: var(--k-font-size-sm, 12px);
			color: var(--k-text-color-secondary, #6b7280);
			line-height: 1.5;
			margin-top: 4px;
		}

		// 不同状态的样式
		&--wait {
			.k-timeline-item__dot {
				background-color: var(--k-color-info, #06b6d4);
				// border-color: var(--k-color-info, #6b7280);
			}

			.k-timeline-item__title {
				color: var(--k-color-info, #06b6d4);
			}
		}

		&--process {
			.k-timeline-item__dot {
				background-color: var(--k-color-primary, #6366f1);
				// border-color: var(--k-color-primary, #6366f1);
			}

			.k-timeline-item__title {
				color: var(--k-color-primary, #6366f1);
			}
		}

		&--finish {
			.k-timeline-item__dot {
				background-color: var(--k-color-success, #10b981);
				// border-color: var(--k-color-success, #10b981);
			}

			.k-timeline-item__title {
				color: var(--k-color-success, #10b981);
			}
		}

		&--error {
			.k-timeline-item__dot {
				background-color: var(--k-color-error, #ef4444);
				// border-color: var(--k-color-error, #ef4444);
			}

			.k-timeline-item__title {
				color: var(--k-color-error, #ef4444);
			}
		}

		// 位置样式
		&--left {
			.k-timeline-item__content-right {
				display: none;
			}
		}

		&--right {
			.k-timeline-item__content-left {
				display: none;
			}
		}

		// 禁用状态
		&--disabled {
			opacity: 0.5;
			pointer-events: none;
		}

		&__content-main.left {
			justify-content: flex-end;
			padding-left: 0;
			padding-right: 16px;

			.k-timeline-item__title {
				text-align: right;
			}

			.k-timeline-item__time {
				text-align: right;
			}

			.k-timeline-item__description {
				text-align: right;
			}
		}


		// 最后一个节点
		// &--last {
		// 	.k-timeline-item__line {
		// 		display: none;
		// 	}
		// }
	}
</style>